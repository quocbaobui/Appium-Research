"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _support = require("appium/support");

let helpers = {};

helpers.ensureInternetPermissionForApp = async function (adb, app) {
  let has = await adb.hasInternetPermissionFromManifest(app);

  if (has) {
    return;
  }

  let msg = 'Your apk does not have INTERNET permissions. Uiautomator2 needs ' + 'the internet permission to proceed. Please check if you have ' + '<uses-permission android:name="android.**permission.INTERNET"/>' + 'in your AndroidManifest.xml';
  throw new Error(msg);
};

helpers.isWriteable = async function isWriteable(filePath) {
  try {
    await _support.fs.access(filePath, _support.fs.W_OK);

    if (_support.system.isWindows()) {
      await _support.fs.close(await _support.fs.open(filePath, 'r+'));
    }

    return true;
  } catch (ign) {
    return false;
  }
};

helpers.signApp = async function (adb, appPath) {
  if (!(await this.isWriteable(appPath))) {
    throw new Error(`The application at '${appPath}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(appPath)}' ` + `for the Appium process, so it could sign the application`);
  }

  await adb.sign(appPath);
};

var _default = helpers;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoZWxwZXJzIiwiZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwIiwiYWRiIiwiYXBwIiwiaGFzIiwiaGFzSW50ZXJuZXRQZXJtaXNzaW9uRnJvbU1hbmlmZXN0IiwibXNnIiwiRXJyb3IiLCJpc1dyaXRlYWJsZSIsImZpbGVQYXRoIiwiZnMiLCJhY2Nlc3MiLCJXX09LIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwiY2xvc2UiLCJvcGVuIiwiaWduIiwic2lnbkFwcCIsImFwcFBhdGgiLCJwYXRoIiwiZGlybmFtZSIsInNpZ24iXSwic291cmNlcyI6WyIuLi8uLi9saWIvaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzLCBzeXN0ZW0gfSBmcm9tICdhcHBpdW0vc3VwcG9ydCc7XG5cblxubGV0IGhlbHBlcnMgPSB7fTtcblxuaGVscGVycy5lbnN1cmVJbnRlcm5ldFBlcm1pc3Npb25Gb3JBcHAgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBhcHApIHtcbiAgbGV0IGhhcyA9IGF3YWl0IGFkYi5oYXNJbnRlcm5ldFBlcm1pc3Npb25Gcm9tTWFuaWZlc3QoYXBwKTtcbiAgaWYgKGhhcykge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbXNnID0gJ1lvdXIgYXBrIGRvZXMgbm90IGhhdmUgSU5URVJORVQgcGVybWlzc2lvbnMuIFVpYXV0b21hdG9yMiBuZWVkcyAnICtcbiAgICAgICAgICAgICd0aGUgaW50ZXJuZXQgcGVybWlzc2lvbiB0byBwcm9jZWVkLiBQbGVhc2UgY2hlY2sgaWYgeW91IGhhdmUgJyArXG4gICAgICAgICAgICAnPHVzZXMtcGVybWlzc2lvbiBhbmRyb2lkOm5hbWU9XCJhbmRyb2lkLioqcGVybWlzc2lvbi5JTlRFUk5FVFwiLz4nICtcbiAgICAgICAgICAgICdpbiB5b3VyIEFuZHJvaWRNYW5pZmVzdC54bWwnO1xuICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbn07XG5cbmhlbHBlcnMuaXNXcml0ZWFibGUgPSBhc3luYyBmdW5jdGlvbiBpc1dyaXRlYWJsZSAoZmlsZVBhdGgpIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy5hY2Nlc3MoZmlsZVBhdGgsIGZzLldfT0spO1xuICAgIGlmIChzeXN0ZW0uaXNXaW5kb3dzKCkpIHtcbiAgICAgIC8vIE9uIG9wZXJhdGluZyBzeXN0ZW1zLCB3aGVyZSBhY2Nlc3MtY29udHJvbCBwb2xpY2llcyBtYXlcbiAgICAgIC8vIGxpbWl0IGFjY2VzcyB0byB0aGUgZmlsZSBzeXN0ZW0sIGBmcy5hY2Nlc3NgIGRvZXMgbm90IHdvcmtcbiAgICAgIC8vIGFzIGV4cGVjdGVkLiBTZWUgaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIXRvcGljL25vZGVqcy9xbVp0SXdEUlNZb1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlsc1xuICAgICAgYXdhaXQgZnMuY2xvc2UoYXdhaXQgZnMub3BlbihmaWxlUGF0aCwgJ3IrJykpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoaWduKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5oZWxwZXJzLnNpZ25BcHAgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBhcHBQYXRoKSB7XG4gIGlmICghYXdhaXQgdGhpcy5pc1dyaXRlYWJsZShhcHBQYXRoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGFwcGxpY2F0aW9uIGF0ICcke2FwcFBhdGh9JyBpcyBub3Qgd3JpdGVhYmxlLiBgICtcbiAgICAgIGBQbGVhc2UgZ3JhbnQgd3JpdGUgcGVybWlzc2lvbnMgdG8gdGhpcyBmaWxlIG9yIHRvIGl0cyBwYXJlbnQgZm9sZGVyICcke3BhdGguZGlybmFtZShhcHBQYXRoKX0nIGAgK1xuICAgICAgYGZvciB0aGUgQXBwaXVtIHByb2Nlc3MsIHNvIGl0IGNvdWxkIHNpZ24gdGhlIGFwcGxpY2F0aW9uYCk7XG4gIH1cbiAgYXdhaXQgYWRiLnNpZ24oYXBwUGF0aCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoZWxwZXJzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBLElBQUlBLE9BQU8sR0FBRyxFQUFkOztBQUVBQSxPQUFPLENBQUNDLDhCQUFSLEdBQXlDLGdCQUFnQkMsR0FBaEIsRUFBcUJDLEdBQXJCLEVBQTBCO0VBQ2pFLElBQUlDLEdBQUcsR0FBRyxNQUFNRixHQUFHLENBQUNHLGlDQUFKLENBQXNDRixHQUF0QyxDQUFoQjs7RUFDQSxJQUFJQyxHQUFKLEVBQVM7SUFDUDtFQUNEOztFQUNELElBQUlFLEdBQUcsR0FBRyxxRUFDQSwrREFEQSxHQUVBLGlFQUZBLEdBR0EsNkJBSFY7RUFJQSxNQUFNLElBQUlDLEtBQUosQ0FBVUQsR0FBVixDQUFOO0FBQ0QsQ0FWRDs7QUFZQU4sT0FBTyxDQUFDUSxXQUFSLEdBQXNCLGVBQWVBLFdBQWYsQ0FBNEJDLFFBQTVCLEVBQXNDO0VBQzFELElBQUk7SUFDRixNQUFNQyxXQUFBLENBQUdDLE1BQUgsQ0FBVUYsUUFBVixFQUFvQkMsV0FBQSxDQUFHRSxJQUF2QixDQUFOOztJQUNBLElBQUlDLGVBQUEsQ0FBT0MsU0FBUCxFQUFKLEVBQXdCO01BS3RCLE1BQU1KLFdBQUEsQ0FBR0ssS0FBSCxDQUFTLE1BQU1MLFdBQUEsQ0FBR00sSUFBSCxDQUFRUCxRQUFSLEVBQWtCLElBQWxCLENBQWYsQ0FBTjtJQUNEOztJQUNELE9BQU8sSUFBUDtFQUNELENBVkQsQ0FVRSxPQUFPUSxHQUFQLEVBQVk7SUFDWixPQUFPLEtBQVA7RUFDRDtBQUNGLENBZEQ7O0FBZ0JBakIsT0FBTyxDQUFDa0IsT0FBUixHQUFrQixnQkFBZ0JoQixHQUFoQixFQUFxQmlCLE9BQXJCLEVBQThCO0VBQzlDLElBQUksRUFBQyxNQUFNLEtBQUtYLFdBQUwsQ0FBaUJXLE9BQWpCLENBQVAsQ0FBSixFQUFzQztJQUNwQyxNQUFNLElBQUlaLEtBQUosQ0FBVyx1QkFBc0JZLE9BQVEsc0JBQS9CLEdBQ2Isd0VBQXVFQyxhQUFBLENBQUtDLE9BQUwsQ0FBYUYsT0FBYixDQUFzQixJQURoRixHQUViLDBEQUZHLENBQU47RUFHRDs7RUFDRCxNQUFNakIsR0FBRyxDQUFDb0IsSUFBSixDQUFTSCxPQUFULENBQU47QUFDRCxDQVBEOztlQVNlbkIsTyJ9