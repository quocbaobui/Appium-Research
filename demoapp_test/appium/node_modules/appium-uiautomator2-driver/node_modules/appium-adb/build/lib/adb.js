"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_ADB_PORT = exports.ADB = void 0;
Object.defineProperty(exports, "getAndroidBinaryPath", {
  enumerable: true,
  get: function () {
    return _index.getAndroidBinaryPath;
  }
});
Object.defineProperty(exports, "getSdkRootFromEnv", {
  enumerable: true,
  get: function () {
    return _helpers.getSdkRootFromEnv;
  }
});

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _index = _interopRequireWildcard(require("./tools/index.js"));

var _helpers = require("./helpers");

var _logger = _interopRequireDefault(require("./logger.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;
const DEFAULT_OPTS = {
  sdkRoot: (0, _helpers.getSdkRootFromEnv)() || null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: 'adb',
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  suppressKillServer: null,
  jars: {},
  adbPort: DEFAULT_ADB_PORT,
  adbHost: null,
  adbExecTimeout: _helpers.DEFAULT_ADB_EXEC_TIMEOUT,
  remoteAppsCacheLimit: 10,
  buildToolsVersion: null,
  allowOfflineDevices: false,
  allowDelayAdb: true
};

class ADB {
  constructor(opts = {}) {
    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push('-H', opts.remoteAdbHost);
      this.adbHost = opts.remoteAdbHost;
    }

    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }

    this.executable.defaultArgs.push('-P', this.adbPort);
  }

  clone(opts = {}) {
    const originalOptions = _lodash.default.cloneDeep(_lodash.default.pick(this, Object.keys(DEFAULT_OPTS)));

    const cloneOptions = _lodash.default.defaultsDeep(opts, originalOptions);

    const defaultArgs = cloneOptions.executable.defaultArgs;

    if (cloneOptions.remoteAdbHost && defaultArgs.includes('-H')) {
      defaultArgs.splice(defaultArgs.indexOf('-H'), 2);
    }

    if (defaultArgs.includes('-P')) {
      defaultArgs.splice(defaultArgs.indexOf('-P'), 2);
    }

    return new ADB(cloneOptions);
  }

}

exports.ADB = ADB;

ADB.createADB = async function createADB(opts) {
  const adb = new ADB(opts);
  adb.sdkRoot = await (0, _helpers.requireSdkRoot)(adb.sdkRoot);
  await adb.getAdbWithCorrectAdbPath();

  try {
    await adb.adbExec(['start-server']);
  } catch (e) {
    _logger.default.warn(e.stderr || e.message);
  }

  return adb;
};

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  ADB.prototype[fnName] = fn;
}

var _default = ADB;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX0FEQl9QT1JUIiwiREVGQVVMVF9PUFRTIiwic2RrUm9vdCIsImdldFNka1Jvb3RGcm9tRW52IiwidWRpZCIsImFwcERldmljZVJlYWR5VGltZW91dCIsInVzZUtleXN0b3JlIiwia2V5c3RvcmVQYXRoIiwia2V5c3RvcmVQYXNzd29yZCIsImtleUFsaWFzIiwia2V5UGFzc3dvcmQiLCJleGVjdXRhYmxlIiwicGF0aCIsImRlZmF1bHRBcmdzIiwidG1wRGlyIiwib3MiLCJ0bXBkaXIiLCJjdXJEZXZpY2VJZCIsImVtdWxhdG9yUG9ydCIsImxvZ2NhdCIsImJpbmFyaWVzIiwiaW5zdHJ1bWVudFByb2MiLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJqYXJzIiwiYWRiUG9ydCIsImFkYkhvc3QiLCJhZGJFeGVjVGltZW91dCIsIkRFRkFVTFRfQURCX0VYRUNfVElNRU9VVCIsInJlbW90ZUFwcHNDYWNoZUxpbWl0IiwiYnVpbGRUb29sc1ZlcnNpb24iLCJhbGxvd09mZmxpbmVEZXZpY2VzIiwiYWxsb3dEZWxheUFkYiIsIkFEQiIsImNvbnN0cnVjdG9yIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsIl8iLCJkZWZhdWx0c0RlZXAiLCJjbG9uZURlZXAiLCJyZW1vdGVBZGJIb3N0IiwicHVzaCIsInJlbW90ZUFkYlBvcnQiLCJjbG9uZSIsIm9yaWdpbmFsT3B0aW9ucyIsInBpY2siLCJrZXlzIiwiY2xvbmVPcHRpb25zIiwiaW5jbHVkZXMiLCJzcGxpY2UiLCJpbmRleE9mIiwiY3JlYXRlQURCIiwiYWRiIiwicmVxdWlyZVNka1Jvb3QiLCJnZXRBZGJXaXRoQ29ycmVjdEFkYlBhdGgiLCJhZGJFeGVjIiwiZSIsImxvZyIsIndhcm4iLCJzdGRlcnIiLCJtZXNzYWdlIiwiZm5OYW1lIiwiZm4iLCJ0b1BhaXJzIiwibWV0aG9kcyIsInByb3RvdHlwZSJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9hZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgbWV0aG9kcywgeyBnZXRBbmRyb2lkQmluYXJ5UGF0aCB9IGZyb20gJy4vdG9vbHMvaW5kZXguanMnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9BREJfRVhFQ19USU1FT1VULCByZXF1aXJlU2RrUm9vdCwgZ2V0U2RrUm9vdEZyb21FbnZcbn0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXIuanMnO1xuXG5jb25zdCBERUZBVUxUX0FEQl9QT1JUID0gNTAzNztcbmNvbnN0IERFRkFVTFRfT1BUUyA9IHtcbiAgc2RrUm9vdDogZ2V0U2RrUm9vdEZyb21FbnYoKSB8fCBudWxsLFxuICB1ZGlkOiBudWxsLFxuICBhcHBEZXZpY2VSZWFkeVRpbWVvdXQ6IG51bGwsXG4gIHVzZUtleXN0b3JlOiBudWxsLFxuICBrZXlzdG9yZVBhdGg6IG51bGwsXG4gIGtleXN0b3JlUGFzc3dvcmQ6IG51bGwsXG4gIGtleUFsaWFzOiBudWxsLFxuICBrZXlQYXNzd29yZDogbnVsbCxcbiAgZXhlY3V0YWJsZToge3BhdGg6ICdhZGInLCBkZWZhdWx0QXJnczogW119LFxuICB0bXBEaXI6IG9zLnRtcGRpcigpLFxuICBjdXJEZXZpY2VJZDogbnVsbCxcbiAgZW11bGF0b3JQb3J0OiBudWxsLFxuICBsb2djYXQ6IG51bGwsXG4gIGJpbmFyaWVzOiB7fSxcbiAgaW5zdHJ1bWVudFByb2M6IG51bGwsXG4gIHN1cHByZXNzS2lsbFNlcnZlcjogbnVsbCxcbiAgamFyczoge30sXG4gIGFkYlBvcnQ6IERFRkFVTFRfQURCX1BPUlQsXG4gIGFkYkhvc3Q6IG51bGwsXG4gIGFkYkV4ZWNUaW1lb3V0OiBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQsXG4gIHJlbW90ZUFwcHNDYWNoZUxpbWl0OiAxMCxcbiAgYnVpbGRUb29sc1ZlcnNpb246IG51bGwsXG4gIGFsbG93T2ZmbGluZURldmljZXM6IGZhbHNlLFxuICBhbGxvd0RlbGF5QWRiOiB0cnVlLFxufTtcblxuY2xhc3MgQURCIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XG4gICAgXy5kZWZhdWx0c0RlZXAodGhpcywgXy5jbG9uZURlZXAoREVGQVVMVF9PUFRTKSk7XG5cbiAgICBpZiAob3B0cy5yZW1vdGVBZGJIb3N0KSB7XG4gICAgICB0aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MucHVzaCgnLUgnLCBvcHRzLnJlbW90ZUFkYkhvc3QpO1xuICAgICAgdGhpcy5hZGJIb3N0ID0gb3B0cy5yZW1vdGVBZGJIb3N0O1xuICAgIH1cbiAgICAvLyBUT0RPIGZpZ3VyZSBvdXQgd2h5IHdlIGhhdmUgdGhpcyBvcHRpb24gYXMgaXQgZG9lcyBub3QgYXBwZWFyIHRvIGJlXG4gICAgLy8gdXNlZCBhbnl3aGVyZS4gUHJvYmFibHkgZGVwcmVjYXRlIGluIGZhdm9yIG9mIHNpbXBsZSBvcHRzLmFkYlBvcnRcbiAgICBpZiAob3B0cy5yZW1vdGVBZGJQb3J0KSB7XG4gICAgICB0aGlzLmFkYlBvcnQgPSBvcHRzLnJlbW90ZUFkYlBvcnQ7XG4gICAgfVxuICAgIHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5wdXNoKCctUCcsIHRoaXMuYWRiUG9ydCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGBBREJgIHRoYXQgaW5oZXJpdHMgY29uZmlndXJhdGlvbiBmcm9tIHRoaXMgYEFEQmAgaW5zdGFuY2UuXG4gICAqIFRoaXMgYXZvaWRzIHRoZSBuZWVkIHRvIGNhbGwgYEFEQi5jcmVhdGVBREIoKWAgbXVsdGlwbGUgdGltZXMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gQWRkaXRpb25hbCBvcHRpb25zIG1hcHBpbmcgdG8gcGFzcyB0byB0aGUgYEFEQmAgY29uc3RydWN0b3IuXG4gICAqIEByZXR1cm5zIHtBREJ9IFRoZSByZXN1bHRpbmcgY2xhc3MgaW5zdGFuY2UuXG4gICAqL1xuICBjbG9uZSAob3B0cyA9IHt9KSB7XG4gICAgY29uc3Qgb3JpZ2luYWxPcHRpb25zID0gXy5jbG9uZURlZXAoXy5waWNrKHRoaXMsIE9iamVjdC5rZXlzKERFRkFVTFRfT1BUUykpKTtcbiAgICBjb25zdCBjbG9uZU9wdGlvbnMgPSBfLmRlZmF1bHRzRGVlcChvcHRzLCBvcmlnaW5hbE9wdGlvbnMpO1xuXG4gICAgLy8gUmVzZXQgZGVmYXVsdCBhcmd1bWVudHMgY3JlYXRlZCBpbiB0aGUgY29uc3RydWN0b3IuXG4gICAgLy8gV2l0aG91dCB0aGlzIGNvZGUsIC1IIGFuZCAtUCBjYW4gYmUgaW5qZWN0ZWQgaW50byBkZWZhdWx0QXJncyBtdWx0aXBsZSB0aW1lcy5cbiAgICBjb25zdCBkZWZhdWx0QXJncyA9IGNsb25lT3B0aW9ucy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzO1xuICAgIGlmIChjbG9uZU9wdGlvbnMucmVtb3RlQWRiSG9zdCAmJiBkZWZhdWx0QXJncy5pbmNsdWRlcygnLUgnKSkge1xuICAgICAgZGVmYXVsdEFyZ3Muc3BsaWNlKGRlZmF1bHRBcmdzLmluZGV4T2YoJy1IJyksIDIpO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdEFyZ3MuaW5jbHVkZXMoJy1QJykpIHtcbiAgICAgIGRlZmF1bHRBcmdzLnNwbGljZShkZWZhdWx0QXJncy5pbmRleE9mKCctUCcpLCAyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFEQihjbG9uZU9wdGlvbnMpO1xuICB9XG59XG5cbkFEQi5jcmVhdGVBREIgPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVBREIgKG9wdHMpIHtcbiAgY29uc3QgYWRiID0gbmV3IEFEQihvcHRzKTtcbiAgYWRiLnNka1Jvb3QgPSBhd2FpdCByZXF1aXJlU2RrUm9vdChhZGIuc2RrUm9vdCk7XG4gIGF3YWl0IGFkYi5nZXRBZGJXaXRoQ29ycmVjdEFkYlBhdGgoKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBhZGIuYWRiRXhlYyhbJ3N0YXJ0LXNlcnZlciddKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy53YXJuKGUuc3RkZXJyIHx8IGUubWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIGFkYjtcbn07XG5cbi8vIGFkZCBhbGwgdGhlIG1ldGhvZHMgdG8gdGhlIEFEQiBwcm90b3R5cGVcbmZvciAoY29uc3QgW2ZuTmFtZSwgZm5dIG9mIF8udG9QYWlycyhtZXRob2RzKSkge1xuICBBREIucHJvdG90eXBlW2ZuTmFtZV0gPSBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQURCO1xuZXhwb3J0IHsgQURCLCBERUZBVUxUX0FEQl9QT1JULCBnZXRBbmRyb2lkQmluYXJ5UGF0aCwgZ2V0U2RrUm9vdEZyb21FbnYgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7Ozs7O0FBRUEsTUFBTUEsZ0JBQWdCLEdBQUcsSUFBekI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHO0VBQ25CQyxPQUFPLEVBQUUsSUFBQUMsMEJBQUEsT0FBdUIsSUFEYjtFQUVuQkMsSUFBSSxFQUFFLElBRmE7RUFHbkJDLHFCQUFxQixFQUFFLElBSEo7RUFJbkJDLFdBQVcsRUFBRSxJQUpNO0VBS25CQyxZQUFZLEVBQUUsSUFMSztFQU1uQkMsZ0JBQWdCLEVBQUUsSUFOQztFQU9uQkMsUUFBUSxFQUFFLElBUFM7RUFRbkJDLFdBQVcsRUFBRSxJQVJNO0VBU25CQyxVQUFVLEVBQUU7SUFBQ0MsSUFBSSxFQUFFLEtBQVA7SUFBY0MsV0FBVyxFQUFFO0VBQTNCLENBVE87RUFVbkJDLE1BQU0sRUFBRUMsV0FBQSxDQUFHQyxNQUFILEVBVlc7RUFXbkJDLFdBQVcsRUFBRSxJQVhNO0VBWW5CQyxZQUFZLEVBQUUsSUFaSztFQWFuQkMsTUFBTSxFQUFFLElBYlc7RUFjbkJDLFFBQVEsRUFBRSxFQWRTO0VBZW5CQyxjQUFjLEVBQUUsSUFmRztFQWdCbkJDLGtCQUFrQixFQUFFLElBaEJEO0VBaUJuQkMsSUFBSSxFQUFFLEVBakJhO0VBa0JuQkMsT0FB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