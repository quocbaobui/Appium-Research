"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _driver = require("appium/driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.isIMEActivated = async function isIMEActivated() {
  return true;
};

commands.availableIMEEngines = async function availableIMEEngines() {
  this.log.debug('Retrieving available IMEs');
  let engines = await this.adb.availableIMEs();
  this.log.debug(`Engines: ${JSON.stringify(engines)}`);
  return engines;
};

commands.getActiveIMEEngine = async function getActiveIMEEngine() {
  this.log.debug('Retrieving current default IME');
  return await this.adb.defaultIME();
};

commands.activateIMEEngine = async function activateIMEEngine(imeId) {
  this.log.debug(`Attempting to activate IME ${imeId}`);
  let availableEngines = await this.adb.availableIMEs();

  if (availableEngines.indexOf(imeId) === -1) {
    this.log.debug('IME not found, failing');
    throw new _driver.errors.IMENotAvailableError();
  }

  this.log.debug('Found installed IME, attempting to activate');
  await this.adb.enableIME(imeId);
  await this.adb.setIME(imeId);
};

commands.deactivateIMEEngine = async function deactivateIMEEngine() {
  let currentEngine = await this.getActiveIMEEngine();
  this.log.debug(`Attempting to deactivate ${currentEngine}`);
  await this.adb.disableIME(currentEngine);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiaXNJTUVBY3RpdmF0ZWQiLCJhdmFpbGFibGVJTUVFbmdpbmVzIiwibG9nIiwiZGVidWciLCJlbmdpbmVzIiwiYWRiIiwiYXZhaWxhYmxlSU1FcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRBY3RpdmVJTUVFbmdpbmUiLCJkZWZhdWx0SU1FIiwiYWN0aXZhdGVJTUVFbmdpbmUiLCJpbWVJZCIsImF2YWlsYWJsZUVuZ2luZXMiLCJpbmRleE9mIiwiZXJyb3JzIiwiSU1FTm90QXZhaWxhYmxlRXJyb3IiLCJlbmFibGVJTUUiLCJzZXRJTUUiLCJkZWFjdGl2YXRlSU1FRW5naW5lIiwiY3VycmVudEVuZ2luZSIsImRpc2FibGVJTUUiLCJPYmplY3QiLCJhc3NpZ24iXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvaW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS9kcml2ZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmlzSU1FQWN0aXZhdGVkID0gYXN5bmMgZnVuY3Rpb24gaXNJTUVBY3RpdmF0ZWQgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgLy8gSU1FIGlzIGFsd2F5cyBhY3RpdmF0ZWQgb24gQW5kcm9pZCBkZXZpY2VzXG4gIHJldHVybiB0cnVlO1xufTtcblxuY29tbWFuZHMuYXZhaWxhYmxlSU1FRW5naW5lcyA9IGFzeW5jIGZ1bmN0aW9uIGF2YWlsYWJsZUlNRUVuZ2luZXMgKCkge1xuICB0aGlzLmxvZy5kZWJ1ZygnUmV0cmlldmluZyBhdmFpbGFibGUgSU1FcycpO1xuICBsZXQgZW5naW5lcyA9IGF3YWl0IHRoaXMuYWRiLmF2YWlsYWJsZUlNRXMoKTtcbiAgdGhpcy5sb2cuZGVidWcoYEVuZ2luZXM6ICR7SlNPTi5zdHJpbmdpZnkoZW5naW5lcyl9YCk7XG4gIHJldHVybiBlbmdpbmVzO1xufTtcblxuY29tbWFuZHMuZ2V0QWN0aXZlSU1FRW5naW5lID0gYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZlSU1FRW5naW5lICgpIHtcbiAgdGhpcy5sb2cuZGVidWcoJ1JldHJpZXZpbmcgY3VycmVudCBkZWZhdWx0IElNRScpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5hZGIuZGVmYXVsdElNRSgpO1xufTtcblxuY29tbWFuZHMuYWN0aXZhdGVJTUVFbmdpbmUgPSBhc3luYyBmdW5jdGlvbiBhY3RpdmF0ZUlNRUVuZ2luZSAoaW1lSWQpIHtcbiAgdGhpcy5sb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gYWN0aXZhdGUgSU1FICR7aW1lSWR9YCk7XG4gIGxldCBhdmFpbGFibGVFbmdpbmVzID0gYXdhaXQgdGhpcy5hZGIuYXZhaWxhYmxlSU1FcygpO1xuICBpZiAoYXZhaWxhYmxlRW5naW5lcy5pbmRleE9mKGltZUlkKSA9PT0gLTEpIHtcbiAgICB0aGlzLmxvZy5kZWJ1ZygnSU1FIG5vdCBmb3VuZCwgZmFpbGluZycpO1xuICAgIHRocm93IG5ldyBlcnJvcnMuSU1FTm90QXZhaWxhYmxlRXJyb3IoKTtcbiAgfVxuICB0aGlzLmxvZy5kZWJ1ZygnRm91bmQgaW5zdGFsbGVkIElNRSwgYXR0ZW1wdGluZyB0byBhY3RpdmF0ZScpO1xuICBhd2FpdCB0aGlzLmFkYi5lbmFibGVJTUUoaW1lSWQpO1xuICBhd2FpdCB0aGlzLmFkYi5zZXRJTUUoaW1lSWQpO1xufTtcblxuY29tbWFuZHMuZGVhY3RpdmF0ZUlNRUVuZ2luZSA9IGFzeW5jIGZ1bmN0aW9uIGRlYWN0aXZhdGVJTUVFbmdpbmUgKCkge1xuICBsZXQgY3VycmVudEVuZ2luZSA9IGF3YWl0IHRoaXMuZ2V0QWN0aXZlSU1FRW5naW5lKCk7XG4gIHRoaXMubG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIGRlYWN0aXZhdGUgJHtjdXJyZW50RW5naW5lfWApO1xuICBhd2FpdCB0aGlzLmFkYi5kaXNhYmxlSU1FKGN1cnJlbnRFbmdpbmUpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7OztBQUVBRixRQUFRLENBQUNHLGNBQVQsR0FBMEIsZUFBZUEsY0FBZixHQUFpQztFQUV6RCxPQUFPLElBQVA7QUFDRCxDQUhEOztBQUtBSCxRQUFRLENBQUNJLG1CQUFULEdBQStCLGVBQWVBLG1CQUFmLEdBQXNDO0VBQ25FLEtBQUtDLEdBQUwsQ0FBU0MsS0FBVCxDQUFlLDJCQUFmO0VBQ0EsSUFBSUMsT0FBTyxHQUFHLE1BQU0sS0FBS0MsR0FBTCxDQUFTQyxhQUFULEVBQXBCO0VBQ0EsS0FBS0osR0FBTCxDQUFTQyxLQUFULENBQWdCLFlBQVdJLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixPQUFmLENBQXdCLEVBQW5EO0VBQ0EsT0FBT0EsT0FBUDtBQUNELENBTEQ7O0FBT0FQLFFBQVEsQ0FBQ1ksa0JBQVQsR0FBOEIsZUFBZUEsa0JBQWYsR0FBcUM7RUFDakUsS0FBS1AsR0FBTCxDQUFTQyxLQUFULENBQWUsZ0NBQWY7RUFDQSxPQUFPLE1BQU0sS0FBS0UsR0FBTCxDQUFTSyxVQUFULEVBQWI7QUFDRCxDQUhEOztBQUtBYixRQUFRLENBQUNjLGlCQUFULEdBQTZCLGVBQWVBLGlCQUFmLENBQWtDQyxLQUFsQyxFQUF5QztFQUNwRSxLQUFLVixHQUFMLENBQVNDLEtBQVQsQ0FBZ0IsOEJBQTZCUyxLQUFNLEVBQW5EO0VBQ0EsSUFBSUMsZ0JBQWdCLEdBQUcsTUFBTSxLQUFLUixHQUFMLENBQVNDLGFBQVQsRUFBN0I7O0VBQ0EsSUFBSU8sZ0JBQWdCLENBQUNDLE9BQWpCLENBQXlCRixLQUF6QixNQUFvQyxDQUFDLENBQXpDLEVBQTRDO0lBQzFDLEtBQUtWLEdBQUwsQ0FBU0MsS0FBVCxDQUFlLHdCQUFmO0lBQ0EsTUFBTSxJQUFJWSxjQUFBLENBQU9DLG9CQUFYLEVBQU47RUFDRDs7RUFDRCxLQUFLZCxHQUFMLENBQVNDLEtBQVQsQ0FBZSw2Q0FBZjtFQUNBLE1BQU0sS0FBS0UsR0FBTCxDQUFTWSxTQUFULENBQW1CTCxLQUFuQixDQUFOO0VBQ0EsTUFBTSxLQUFLUCxHQUFMLENBQVNhLE1BQVQsQ0FBZ0JOLEtBQWhCLENBQU47QUFDRCxDQVZEOztBQVlBZixRQUFRLENBQUNzQixtQkFBVCxHQUErQixlQUFlQSxtQkFBZixHQUFzQztFQUNuRSxJQUFJQyxhQUFhLEdBQUcsTUFBTSxLQUFLWCxrQkFBTCxFQUExQjtFQUNBLEtBQUtQLEdBQUwsQ0FBU0MsS0FBVCxDQUFnQiw0QkFBMkJpQixhQUFjLEVBQXpEO0VBQ0EsTUFBTSxLQUFLZixHQUFMLENBQVNnQixVQUFULENBQW9CRCxhQUFwQixDQUFOO0FBQ0QsQ0FKRDs7QUFNQUUsTUFBTSxDQUFDQyxNQUFQLENBQWN4QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSJ9