"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixCaps = fixCaps;
exports.isW3cCaps = isW3cCaps;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

function isW3cCaps(caps) {
  if (!_lodash.default.isPlainObject(caps)) {
    return false;
  }

  const isFirstMatchValid = () => _lodash.default.isArray(caps.firstMatch) && !_lodash.default.isEmpty(caps.firstMatch) && _lodash.default.every(caps.firstMatch, _lodash.default.isPlainObject);

  const isAlwaysMatchValid = () => _lodash.default.isPlainObject(caps.alwaysMatch);

  if (_lodash.default.has(caps, 'firstMatch') && _lodash.default.has(caps, 'alwaysMatch')) {
    return isFirstMatchValid() && isAlwaysMatchValid();
  }

  if (_lodash.default.has(caps, 'firstMatch')) {
    return isFirstMatchValid();
  }

  if (_lodash.default.has(caps, 'alwaysMatch')) {
    return isAlwaysMatchValid();
  }

  return false;
}

function fixCaps(originalCaps, desiredCapConstraints, log) {
  let caps = _lodash.default.clone(originalCaps);

  let booleanCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isBoolean === true));

  for (let cap of booleanCaps) {
    let value = originalCaps[cap];

    if (_lodash.default.isString(value)) {
      value = value.toLowerCase();

      if (value === 'true' || value === 'false') {
        log.warn(`Capability '${cap}' changed from string to boolean. This may cause unexpected behavior`);
        caps[cap] = value === 'true';
      }
    }
  }

  let intCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isNumber === true));

  for (let cap of intCaps) {
    let value = originalCaps[cap];

    if (_lodash.default.isString(value)) {
      value = value.trim();
      let newValue = parseInt(value, 10);

      if (value !== `${newValue}`) {
        newValue = parseFloat(value);
      }

      log.warn(`Capability '${cap}' changed from string ('${value}') to integer (${newValue}). This may cause unexpected behavior`);
      caps[cap] = newValue;
    }
  }

  return caps;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1czY0NhcHMiLCJjYXBzIiwiXyIsImlzUGxhaW5PYmplY3QiLCJpc0ZpcnN0TWF0Y2hWYWxpZCIsImlzQXJyYXkiLCJmaXJzdE1hdGNoIiwiaXNFbXB0eSIsImV2ZXJ5IiwiaXNBbHdheXNNYXRjaFZhbGlkIiwiYWx3YXlzTWF0Y2giLCJoYXMiLCJmaXhDYXBzIiwib3JpZ2luYWxDYXBzIiwiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwibG9nIiwiY2xvbmUiLCJib29sZWFuQ2FwcyIsImtleXMiLCJwaWNrQnkiLCJrIiwiaXNCb29sZWFuIiwiY2FwIiwidmFsdWUiLCJpc1N0cmluZyIsInRvTG93ZXJDYXNlIiwid2FybiIsImludENhcHMiLCJpc051bWJlciIsInRyaW0iLCJuZXdWYWx1ZSIsInBhcnNlSW50IiwicGFyc2VGbG9hdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oZWxwZXJzL2NhcGFiaWxpdGllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtY2hlY2tcblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuZnVuY3Rpb24gaXNXM2NDYXBzKGNhcHMpIHtcbiAgaWYgKCFfLmlzUGxhaW5PYmplY3QoY2FwcykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBpc0ZpcnN0TWF0Y2hWYWxpZCA9ICgpID0+XG4gICAgXy5pc0FycmF5KGNhcHMuZmlyc3RNYXRjaCkgJiZcbiAgICAhXy5pc0VtcHR5KGNhcHMuZmlyc3RNYXRjaCkgJiZcbiAgICBfLmV2ZXJ5KGNhcHMuZmlyc3RNYXRjaCwgXy5pc1BsYWluT2JqZWN0KTtcbiAgY29uc3QgaXNBbHdheXNNYXRjaFZhbGlkID0gKCkgPT4gXy5pc1BsYWluT2JqZWN0KGNhcHMuYWx3YXlzTWF0Y2gpO1xuICBpZiAoXy5oYXMoY2FwcywgJ2ZpcnN0TWF0Y2gnKSAmJiBfLmhhcyhjYXBzLCAnYWx3YXlzTWF0Y2gnKSkge1xuICAgIHJldHVybiBpc0ZpcnN0TWF0Y2hWYWxpZCgpICYmIGlzQWx3YXlzTWF0Y2hWYWxpZCgpO1xuICB9XG4gIGlmIChfLmhhcyhjYXBzLCAnZmlyc3RNYXRjaCcpKSB7XG4gICAgcmV0dXJuIGlzRmlyc3RNYXRjaFZhbGlkKCk7XG4gIH1cbiAgaWYgKF8uaGFzKGNhcHMsICdhbHdheXNNYXRjaCcpKSB7XG4gICAgcmV0dXJuIGlzQWx3YXlzTWF0Y2hWYWxpZCgpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtDYXBhYmlsaXRpZXN9IG9yaWdpbmFsQ2Fwc1xuICogQHBhcmFtIHtDb25zdHJhaW50c30gZGVzaXJlZENhcENvbnN0cmFpbnRzXG4gKiBAcGFyYW0ge0FwcGl1bUxvZ2dlcn0gbG9nXG4gKiBAcmV0dXJucyB7Q2FwYWJpbGl0aWVzfVxuICovXG5mdW5jdGlvbiBmaXhDYXBzKG9yaWdpbmFsQ2FwcywgZGVzaXJlZENhcENvbnN0cmFpbnRzLCBsb2cpIHtcbiAgbGV0IGNhcHMgPSBfLmNsb25lKG9yaWdpbmFsQ2Fwcyk7XG5cbiAgLy8gYm9vbGVhbiBjYXBhYmlsaXRpZXMgY2FuIGJlIHBhc3NlZCBpbiBhcyBzdHJpbmdzICdmYWxzZScgYW5kICd0cnVlJ1xuICAvLyB3aGljaCB3ZSB3YW50IHRvIHRyYW5zbGF0ZSBpbnRvIGJvb2xlYW4gdmFsdWVzXG4gIGxldCBib29sZWFuQ2FwcyA9IF8ua2V5cyhfLnBpY2tCeShkZXNpcmVkQ2FwQ29uc3RyYWludHMsIChrKSA9PiBrLmlzQm9vbGVhbiA9PT0gdHJ1ZSkpO1xuICBmb3IgKGxldCBjYXAgb2YgYm9vbGVhbkNhcHMpIHtcbiAgICBsZXQgdmFsdWUgPSBvcmlnaW5hbENhcHNbY2FwXTtcbiAgICBpZiAoXy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnZmFsc2UnKSB7XG4gICAgICAgIGxvZy53YXJuKFxuICAgICAgICAgIGBDYXBhYmlsaXR5ICcke2NhcH0nIGNoYW5nZWQgZnJvbSBzdHJpbmcgdG8gYm9vbGVhbi4gVGhpcyBtYXkgY2F1c2UgdW5leHBlY3RlZCBiZWhhdmlvcmBcbiAgICAgICAgKTtcbiAgICAgICAgY2Fwc1tjYXBdID0gdmFsdWUgPT09ICd0cnVlJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBpbnQgY2FwYWJpbGl0aWVzIGFyZSBvZnRlbiBzZW50IGluIGFzIHN0cmluZ3MgYnkgZnJhbWV3b3Jrc1xuICBsZXQgaW50Q2FwcyA9IF8ua2V5cyhfLnBpY2tCeShkZXNpcmVkQ2FwQ29uc3RyYWludHMsIChrKSA9PiBrLmlzTnVtYmVyID09PSB0cnVlKSk7XG4gIGZvciAobGV0IGNhcCBvZiBpbnRDYXBzKSB7XG4gICAgbGV0IHZhbHVlID0gb3JpZ2luYWxDYXBzW2NhcF07XG4gICAgaWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgIGxldCBuZXdWYWx1ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICBpZiAodmFsdWUgIT09IGAke25ld1ZhbHVlfWApIHtcbiAgICAgICAgbmV3VmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGxvZy53YXJuKFxuICAgICAgICBgQ2FwYWJpbGl0eSAnJHtjYXB9JyBjaGFuZ2VkIGZyb20gc3RyaW5nICgnJHt2YWx1ZX0nKSB0byBpbnRlZ2VyICgke25ld1ZhbHVlfSkuIFRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3JgXG4gICAgICApO1xuICAgICAgY2Fwc1tjYXBdID0gbmV3VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhcHM7XG59XG5cbmV4cG9ydCB7aXNXM2NDYXBzLCBmaXhDYXBzfTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuQ2FwYWJpbGl0aWVzfSBDYXBhYmlsaXRpZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5Db25zdHJhaW50c30gQ29uc3RyYWludHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5BcHBpdW1Mb2dnZXJ9IEFwcGl1bUxvZ2dlclxuICovXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBLFNBQVNBLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCO0VBQ3ZCLElBQUksQ0FBQ0MsZUFBQSxDQUFFQyxhQUFGLENBQWdCRixJQUFoQixDQUFMLEVBQTRCO0lBQzFCLE9BQU8sS0FBUDtFQUNEOztFQUVELE1BQU1HLGlCQUFpQixHQUFHLE1BQ3hCRixlQUFBLENBQUVHLE9BQUYsQ0FBVUosSUFBSSxDQUFDSyxVQUFmLEtBQ0EsQ0FBQ0osZUFBQSxDQUFFSyxPQUFGLENBQVVOLElBQUksQ0FBQ0ssVUFBZixDQURELElBRUFKLGVBQUEsQ0FBRU0sS0FBRixDQUFRUCxJQUFJLENBQUNLLFVBQWIsRUFBeUJKLGVBQUEsQ0FBRUMsYUFBM0IsQ0FIRjs7RUFJQSxNQUFNTSxrQkFBa0IsR0FBRyxNQUFNUCxlQUFBLENBQUVDLGFBQUYsQ0FBZ0JGLElBQUksQ0FBQ1MsV0FBckIsQ0FBakM7O0VBQ0EsSUFBSVIsZUFBQSxDQUFFUyxHQUFGLENBQU1WLElBQU4sRUFBWSxZQUFaLEtBQTZCQyxlQUFBLENBQUVTLEdBQUYsQ0FBTVYsSUFBTixFQUFZLGFBQVosQ0FBakMsRUFBNkQ7SUFDM0QsT0FBT0csaUJBQWlCLE1BQU1LLGtCQUFrQixFQUFoRDtFQUNEOztFQUNELElBQUlQLGVBQUEsQ0FBRVMsR0FBRixDQUFNVixJQUFOLEVBQVksWUFBWixDQUFKLEVBQStCO0lBQzdCLE9BQU9HLGlCQUFpQixFQUF4QjtFQUNEOztFQUNELElBQUlGLGVBQUEsQ0FBRVMsR0FBRixDQUFNVixJQUFOLEVBQVksYUFBWixDQUFKLEVBQWdDO0lBQzlCLE9BQU9RLGtCQUFrQixFQUF6QjtFQUNEOztFQUNELE9BQU8sS0FBUDtBQUNEOztBQVNELFNBQVNHLE9BQVQsQ0FBaUJDLFlBQWpCLEVBQStCQyxxQkFBL0IsRUFBc0RDLEdBQXRELEVBQTJEO0VBQ3pELElBQUlkLElBQUksR0FBR0MsZUFBQSxDQUFFYyxLQUFGLENBQVFILFlBQVIsQ0FBWDs7RUFJQSxJQUFJSSxXQUFXLEdBQUdmLGVBQUEsQ0FBRWdCLElBQUYsQ0FBT2hCLGVBQUEsQ0FBRWlCLE1BQUYsQ0FBU0wscUJBQVQsRUFBaUNNLENBQUQsSUFBT0EsQ0FBQyxDQUFDQyxTQUFGLEtBQWdCLElBQXZELENBQVAsQ0FBbEI7O0VBQ0EsS0FBSyxJQUFJQyxHQUFULElBQWdCTCxXQUFoQixFQUE2QjtJQUMzQixJQUFJTSxLQUFLLEdBQUdWLFlBQVksQ0FBQ1MsR0FBRCxDQUF4Qjs7SUFDQSxJQUFJcEIsZUFBQSxDQUFFc0IsUUFBRixDQUFXRCxLQUFYLENBQUosRUFBdUI7TUFDckJBLEtBQUssR0FBR0EsS0FBSyxDQUFDRSxXQUFOLEVBQVI7O01BQ0EsSUFBSUYsS0FBSyxLQUFLLE1BQVYsSUFBb0JBLEtBQUssS0FBSyxPQUFsQyxFQUEyQztRQUN6Q1IsR0FBRyxDQUFDVyxJQUFKLENBQ0csZUFBY0osR0FBSSxzRUFEckI7UUFHQXJCLElBQUksQ0FBQ3FCLEdBQUQsQ0FBSixHQUFZQyxLQUFLLEtBQUssTUFBdEI7TUFDRDtJQUNGO0VBQ0Y7O0VBR0QsSUFBSUksT0FBTyxHQUFHekIsZUFBQSxDQUFFZ0IsSUFBRixDQUFPaEIsZUFBQSxDQUFFaUIsTUFBRixDQUFTTCxxQkFBVCxFQUFpQ00sQ0FBRCxJQUFPQSxDQUFDLENBQUNRLFFBQUYsS0FBZSxJQUF0RCxDQUFQLENBQWQ7O0VBQ0EsS0FBSyxJQUFJTixHQUFULElBQWdCSyxPQUFoQixFQUF5QjtJQUN2QixJQUFJSixLQUFLLEdBQUdWLFlBQVksQ0FBQ1MsR0FBRCxDQUF4Qjs7SUFDQSxJQUFJcEIsZUFBQSxDQUFFc0IsUUFBRixDQUFXRCxLQUFYLENBQUosRUFBdUI7TUFDckJBLEtBQUssR0FBR0EsS0FBSyxDQUFDTSxJQUFOLEVBQVI7TUFDQSxJQUFJQyxRQUFRLEdBQUdDLFFBQVEsQ0FBQ1IsS0FBRCxFQUFRLEVBQVIsQ0FBdkI7O01BQ0EsSUFBSUEsS0FBSyxLQUFNLEdBQUVPLFFBQVMsRUFBMUIsRUFBNkI7UUFDM0JBLFFBQVEsR0FBR0UsVUFBVSxDQUFDVCxLQUFELENBQXJCO01BQ0Q7O01BQ0RSLEdBQUcsQ0FBQ1csSUFBSixDQUNHLGVBQWNKLEdBQUksMkJBQTBCQyxLQUFNLGtCQUFpQk8sUUFBUyx1Q0FEL0U7TUFHQTdCLElBQUksQ0FBQ3FCLEdBQUQsQ0FBSixHQUFZUSxRQUFaO0lBQ0Q7RUFDRjs7RUFFRCxPQUFPN0IsSUFBUDtBQUNEIn0=