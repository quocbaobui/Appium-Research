"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validator = exports.desiredCapabilityConstraints = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _validate = _interopRequireDefault(require("validate.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const validator = _validate.default;
exports.validator = validator;
let desiredCapabilityConstraints = {
  platformName: {
    presence: true,
    isString: true
  },
  deviceName: {
    isString: true
  },
  platformVersion: {
    isString: true
  },
  newCommandTimeout: {
    isNumber: true
  },
  automationName: {
    isString: true
  },
  autoLaunch: {
    isBoolean: true
  },
  udid: {
    isString: true
  },
  orientation: {
    inclusion: ['LANDSCAPE', 'PORTRAIT']
  },
  autoWebview: {
    isBoolean: true
  },
  noReset: {
    isBoolean: true
  },
  fullReset: {
    isBoolean: true
  },
  language: {
    isString: true
  },
  locale: {
    isString: true
  },
  eventTimings: {
    isBoolean: true
  },
  printPageSourceOnFindFailure: {
    isBoolean: true
  }
};
exports.desiredCapabilityConstraints = desiredCapabilityConstraints;

validator.validators.isString = function isString(value) {
  if (typeof value === 'string') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type string';
};

validator.validators.isNumber = function isNumber(value) {
  if (typeof value === 'number') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  if (typeof value === 'string' && !isNaN(Number(value))) {
    _logger.default.warn('Number capability passed in as string. Functionality may be compromised.');

    return null;
  }

  return 'must be of type number';
};

validator.validators.isBoolean = function isBoolean(value) {
  if (typeof value === 'boolean') {
    return null;
  }

  if (typeof value === 'string' && ['true', 'false', ''].includes(value)) {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type boolean';
};

validator.validators.isObject = function isObject(value) {
  if (typeof value === 'object') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type object';
};

validator.validators.isArray = function isArray(value) {
  if (Array.isArray(value)) {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type array';
};

validator.validators.deprecated = function deprecated(value, options, key) {
  if (options) {
    _logger.default.warn(`${key} is a deprecated capability`);
  }

  return null;
};

validator.validators.inclusionCaseInsensitive = function inclusionCaseInsensitive(value, options) {
  if (typeof value === 'undefined') {
    return null;
  } else if (typeof value !== 'string') {
    return 'unrecognised';
  }

  for (let option of options) {
    if (option.toLowerCase() === value.toLowerCase()) {
      return null;
    }
  }

  return `${value} not part of ${options.toString()}`;
};

validator.promise = _bluebird.default;

validator.prettify = function prettify(val) {
  return val;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2YWxpZGF0b3IiLCJfdmFsaWRhdG9yIiwiZGVzaXJlZENhcGFiaWxpdHlDb25zdHJhaW50cyIsInBsYXRmb3JtTmFtZSIsInByZXNlbmNlIiwiaXNTdHJpbmciLCJkZXZpY2VOYW1lIiwicGxhdGZvcm1WZXJzaW9uIiwibmV3Q29tbWFuZFRpbWVvdXQiLCJpc051bWJlciIsImF1dG9tYXRpb25OYW1lIiwiYXV0b0xhdW5jaCIsImlzQm9vbGVhbiIsInVkaWQiLCJvcmllbnRhdGlvbiIsImluY2x1c2lvbiIsImF1dG9XZWJ2aWV3Iiwibm9SZXNldCIsImZ1bGxSZXNldCIsImxhbmd1YWdlIiwibG9jYWxlIiwiZXZlbnRUaW1pbmdzIiwicHJpbnRQYWdlU291cmNlT25GaW5kRmFpbHVyZSIsInZhbGlkYXRvcnMiLCJ2YWx1ZSIsImlzTmFOIiwiTnVtYmVyIiwibG9nIiwid2FybiIsImluY2x1ZGVzIiwiaXNPYmplY3QiLCJpc0FycmF5IiwiQXJyYXkiLCJkZXByZWNhdGVkIiwib3B0aW9ucyIsImtleSIsImluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSIsIm9wdGlvbiIsInRvTG93ZXJDYXNlIiwidG9TdHJpbmciLCJwcm9taXNlIiwiQiIsInByZXR0aWZ5IiwidmFsIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2Jhc2Vkcml2ZXIvZGVzaXJlZC1jYXBzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IF92YWxpZGF0b3IgZnJvbSAndmFsaWRhdGUuanMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5jb25zdCB2YWxpZGF0b3IgPVxuICAvKiogQHR5cGUge2ltcG9ydCgndmFsaWRhdGUuanMnKS5WYWxpZGF0ZUpTICYge3Byb21pc2U6IHR5cGVvZiBpbXBvcnQoJ2JsdWViaXJkJyl9fSAqLyAoXG4gICAgX3ZhbGlkYXRvclxuICApO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLkNvbnN0cmFpbnRzfSAqL1xubGV0IGRlc2lyZWRDYXBhYmlsaXR5Q29uc3RyYWludHMgPSB7XG4gIHBsYXRmb3JtTmFtZToge1xuICAgIHByZXNlbmNlOiB0cnVlLFxuICAgIGlzU3RyaW5nOiB0cnVlLFxuICB9LFxuICBkZXZpY2VOYW1lOiB7XG4gICAgaXNTdHJpbmc6IHRydWUsXG4gIH0sXG4gIHBsYXRmb3JtVmVyc2lvbjoge1xuICAgIGlzU3RyaW5nOiB0cnVlLFxuICB9LFxuICBuZXdDb21tYW5kVGltZW91dDoge1xuICAgIGlzTnVtYmVyOiB0cnVlLFxuICB9LFxuICBhdXRvbWF0aW9uTmFtZToge1xuICAgIGlzU3RyaW5nOiB0cnVlLFxuICB9LFxuICBhdXRvTGF1bmNoOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlLFxuICB9LFxuICB1ZGlkOiB7XG4gICAgaXNTdHJpbmc6IHRydWUsXG4gIH0sXG4gIG9yaWVudGF0aW9uOiB7XG4gICAgaW5jbHVzaW9uOiBbJ0xBTkRTQ0FQRScsICdQT1JUUkFJVCddLFxuICB9LFxuICBhdXRvV2Vidmlldzoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZSxcbiAgfSxcbiAgbm9SZXNldDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZSxcbiAgfSxcbiAgZnVsbFJlc2V0OiB7XG4gICAgaXNCb29sZWFuOiB0cnVlLFxuICB9LFxuICBsYW5ndWFnZToge1xuICAgIGlzU3RyaW5nOiB0cnVlLFxuICB9LFxuICBsb2NhbGU6IHtcbiAgICBpc1N0cmluZzogdHJ1ZSxcbiAgfSxcbiAgZXZlbnRUaW1pbmdzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlLFxuICB9LFxuICBwcmludFBhZ2VTb3VyY2VPbkZpbmRGYWlsdXJlOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlLFxuICB9LFxufTtcblxudmFsaWRhdG9yLnZhbGlkYXRvcnMuaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAnbXVzdCBiZSBvZiB0eXBlIHN0cmluZyc7XG59O1xudmFsaWRhdG9yLnZhbGlkYXRvcnMuaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGFsbG93IGEgc3RyaW5nIHZhbHVlXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICFpc05hTihOdW1iZXIodmFsdWUpKSkge1xuICAgIGxvZy53YXJuKCdOdW1iZXIgY2FwYWJpbGl0eSBwYXNzZWQgaW4gYXMgc3RyaW5nLiBGdW5jdGlvbmFsaXR5IG1heSBiZSBjb21wcm9taXNlZC4nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAnbXVzdCBiZSBvZiB0eXBlIG51bWJlcic7XG59O1xudmFsaWRhdG9yLnZhbGlkYXRvcnMuaXNCb29sZWFuID0gZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gYWxsb3cgYSBzdHJpbmcgdmFsdWVcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgWyd0cnVlJywgJ2ZhbHNlJywgJyddLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAnbXVzdCBiZSBvZiB0eXBlIGJvb2xlYW4nO1xufTtcbnZhbGlkYXRvci52YWxpZGF0b3JzLmlzT2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gJ211c3QgYmUgb2YgdHlwZSBvYmplY3QnO1xufTtcbnZhbGlkYXRvci52YWxpZGF0b3JzLmlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAnbXVzdCBiZSBvZiB0eXBlIGFycmF5Jztcbn07XG52YWxpZGF0b3IudmFsaWRhdG9ycy5kZXByZWNhdGVkID0gZnVuY3Rpb24gZGVwcmVjYXRlZCh2YWx1ZSwgb3B0aW9ucywga2V5KSB7XG4gIGlmIChvcHRpb25zKSB7XG4gICAgbG9nLndhcm4oYCR7a2V5fSBpcyBhIGRlcHJlY2F0ZWQgY2FwYWJpbGl0eWApO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbnZhbGlkYXRvci52YWxpZGF0b3JzLmluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSA9IGZ1bmN0aW9uIGluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSh2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gJ3VucmVjb2duaXNlZCc7XG4gIH1cbiAgZm9yIChsZXQgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9uLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYCR7dmFsdWV9IG5vdCBwYXJ0IG9mICR7b3B0aW9ucy50b1N0cmluZygpfWA7XG59O1xuXG52YWxpZGF0b3IucHJvbWlzZSA9IEI7XG52YWxpZGF0b3IucHJldHRpZnkgPSBmdW5jdGlvbiBwcmV0dGlmeSh2YWwpIHtcbiAgcmV0dXJuIHZhbDtcbn07XG5cbmV4cG9ydCB7ZGVzaXJlZENhcGFiaWxpdHlDb25zdHJhaW50cywgdmFsaWRhdG9yfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxTQUFTLEdBRVhDLGlCQUZKOztBQU1BLElBQUlDLDRCQUE0QixHQUFHO0VBQ2pDQyxZQUFZLEVBQUU7SUFDWkMsUUFBUSxFQUFFLElBREU7SUFFWkMsUUFBUSxFQUFFO0VBRkUsQ0FEbUI7RUFLakNDLFVBQVUsRUFBRTtJQUNWRCxRQUFRLEVBQUU7RUFEQSxDQUxxQjtFQVFqQ0UsZUFBZSxFQUFFO0lBQ2ZGLFFBQVEsRUFBRTtFQURLLENBUmdCO0VBV2pDRyxpQkFBaUIsRUFBRTtJQUNqQkMsUUFBUSxFQUFFO0VBRE8sQ0FYYztFQWNqQ0MsY0FBYyxFQUFFO0lBQ2RMLFFBQVEsRUFBRTtFQURJLENBZGlCO0VBaUJqQ00sVUFBVSxFQUFFO0lBQ1ZDLFNBQVMsRUFBRTtFQURELENBakJxQjtFQW9CakNDLElBQUksRUFBRTtJQUNKUixRQUFRLEVBQUU7RUFETixDQXBCMkI7RUF1QmpDUyxXQUFXLEVBQUU7SUFDWEMsU0FBUyxFQUFFLENBQUMsV0FBRCxFQUFjLFVBQWQ7RUFEQSxDQXZCb0I7RUEwQmpDQyxXQUFXLEVBQUU7SUFDWEosU0FBUyxFQUFFO0VBREEsQ0ExQm9CO0VBNkJqQ0ssT0FBTyxFQUFFO0lBQ1BMLFNBQVMsRUFBRTtFQURKLENBN0J3QjtFQWdDakNNLFNBQVMsRUFBRTtJQUNU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