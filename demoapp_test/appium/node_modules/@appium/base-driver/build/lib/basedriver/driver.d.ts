/**
 * @implements {SessionHandler}
 */
export class BaseDriverCore extends DriverCore implements SessionHandler {
    _constraints: import("@appium/types").Constraints;
    /** @type {Record<string,any>|undefined} */
    cliArgs: Record<string, any> | undefined;
    /**
     * @param {string} cmd
     * @param  {...any} args
     * @returns {Promise<any>}
     */
    executeCommand(cmd: string, ...args: any[]): Promise<any>;
    /**
     *
     * @param {Error} err
     */
    startUnexpectedShutdown(err?: Error): Promise<void>;
    startNewCommandTimeout(): Promise<void>;
    /**
     *
     * @param {import('@appium/types').AppiumServer} server
     * @param {string} host
     * @param {number} port
     * @param {string} path
     */
    assignServer(server: import('@appium/types').AppiumServer, host: string, port: number, path: string): void;
    server: import("@appium/types").AppiumServer | undefined;
    serverHost: string | undefined;
    serverPort: number | undefined;
    serverPath: string | undefined;
    reset(): Promise<void>;
    resetOnUnexpectedShutdown: (() => void) | undefined;
    /**
     *
     * Historically the first two arguments were reserved for JSONWP capabilities.
     * Appium 2 has dropped the support of these, so now we only accept capability
     * objects in W3C format and thus allow any of the three arguments to represent
     * the latter.
     * @param {W3CCapabilities} w3cCapabilities1
     * @param {W3CCapabilities} [w3cCapabilities2]
     * @param {W3CCapabilities} [w3cCapabilities]
     * @param {DriverData[]} [driverData]
     * @returns {Promise<[string,object]>}
     */
    createSession(w3cCapabilities1: W3CCapabilities, w3cCapabilities2?: W3CCapabilities | undefined, w3cCapabilities?: W3CCapabilities | undefined, driverData?: import("@appium/types").DriverData[] | undefined): Promise<[string, object]>;
    /**
     *
     * @param {string} [sessionId]
     * @param {DriverData[]} [driverData]
     * @returns {Promise<void>}
     */
    deleteSession(sessionId?: string | undefined, driverData?: import("@appium/types").DriverData[] | undefined): Promise<void>;
    /**
     *
     * @param {Capabilities} caps
     */
    logExtraCaps(caps: Partial<import("@wdio/types/build/Capabilities").Capabilities & import("@wdio/types/build/Capabilities").AppiumCapabilities & {
        [x: string]: any;
    }>): void;
    /**
     *
     * @param {Capabilities} caps
     * @returns {boolean}
     */
    validateDesiredCaps(caps: Capabilities): boolean;
    set desiredCapConstraints(arg: import("@appium/types").Constraints);
    get desiredCapConstraints(): import("@appium/types").Constraints;
}
export default BaseDriver;
export type HTTPMethod = import('@appium/types').HTTPMethod;
export type Driver = import('@appium/types').Driver;
export type ExternalDriver = import('@appium/types').ExternalDriver;
export type Capabilities = import('@appium/types').Capabilities;
export type W3CCapabilities = import('@appium/types').W3CCapabilities;
export type DriverData = import('@appium/types').DriverData;
export type UpdateServerCallback = (app: import('express').Express, httpServer: import('@appium/types').AppiumServer) => import('type-fest').Promisable<void>;
/**
 * This is used to extend {@linkcode BaseDriverCore } by the mixins and also external drivers.
 */
export type BaseDriverBase<Proto = {}, Static = {}> = import('@appium/types').Class<BaseDriverCore & Proto, import('@appium/types').DriverStatic & Static>;
export type SessionHandler = import('@appium/types').SessionHandler<[string, object], void>;
import { DriverCore } from "./core";
/**
 * @type {import('@appium/types').DriverClass<Driver>}
 */
export const BaseDriver: import('@appium/types').DriverClass<Driver>;
//# sourceMappingURL=driver.d.ts.map