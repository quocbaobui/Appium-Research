"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DriverCore = void 0;

require("source-map-support/register");

var _support = require("@appium/support");

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _events = require("events");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _constants = require("../constants");

var _protocol = require("../protocol");

var _deviceSettings = _interopRequireDefault(require("./device-settings"));

var _helpers = _interopRequireDefault(require("./helpers"));

const {
  version: BASEDRIVER_VER
} = _support.fs.readPackageJsonFrom(__dirname);

const NEW_COMMAND_TIMEOUT_MS = 60 * 1000;
const ON_UNEXPECTED_SHUTDOWN_EVENT = 'onUnexpectedShutdown';

class DriverCore {
  static baseVersion = BASEDRIVER_VER;
  static executeMethodMap = {};
  sessionId = null;
  opts;
  initialOpts;
  caps;
  originalCaps;
  helpers = _helpers.default;
  basePath = _constants.DEFAULT_BASE_PATH;
  relaxedSecurityEnabled = false;
  allowInsecure = [];
  denyInsecure = [];
  newCommandTimeoutMs = NEW_COMMAND_TIMEOUT_MS;
  implicitWaitMs = 0;
  locatorStrategies = [];
  webLocatorStrategies = [];
  managedDrivers = [];
  noCommandTimer = null;
  _eventHistory = {
    commands: []
  };
  eventEmitter = new _events.EventEmitter();
  _log;
  shutdownUnexpectedly = false;
  shouldValidateCaps;
  commandsQueueGuard = new _asyncLock.default();
  settings = new _deviceSettings.default();

  constructor(opts = {}, shouldValidateCaps = true) {
    this._log = _support.logger.getLogger(_helpers.default.generateDriverLogPrefix(this));
    this.opts = opts;
    this.opts.tmpDir = this.opts.tmpDir || process.env.APPIUM_TMP_DIR || _os.default.tmpdir();
    this.shouldValidateCaps = shouldValidateCaps;
    this.initialOpts = _lodash.default.cloneDeep(this.opts);
    this.sessionId = null;
  }

  get log() {
    return this._log;
  }

  onUnexpectedShutdown(handler) {
    this.eventEmitter.on(ON_UNEXPECTED_SHUTDOWN_EVENT, handler);
  }

  get driverData() {
    return {};
  }

  get isCommandsQueueEnabled() {
    return true;
  }

  get eventHistory() {
    return _lodash.default.cloneDeep(this._eventHistory);
  }

  logEvent(eventName) {
    if (eventName === 'commands') {
      throw new Error('Cannot log commands directly');
    }

    if (typeof eventName !== 'string') {
      throw new Error(`Invalid eventName ${eventName}`);
    }

    if (!this._eventHistory[eventName]) {
      this._eventHistory[eventName] = [];
    }

    const ts = Date.now();
    const logTime = new Date(ts).toTimeString();

    this._eventHistory[eventName].push(ts);

    this.log.debug(`Event '${eventName}' logged at ${ts} (${logTime})`);
  }

  async getStatus() {
    return {};
  }

  sessionExists(sessionId) {
    if (!sessionId) return false;
    return sessionId === this.sessionId;
  }

  driverForSession(sessionId) {
    return this;
  }

  isMjsonwpProtocol() {
    return this.protocol === _constants.PROTOCOLS.MJSONWP;
  }

  isW3CProtocol() {
    return this.protocol === _constants.PROTOCOLS.W3C;
  }

  setProtocolMJSONWP() {
    this.protocol = _constants.PROTOCOLS.MJSONWP;
  }

  setProtocolW3C() {
    this.protocol = _constants.PROTOCOLS.W3C;
  }

  isFeatureEnabled(name) {
    if (this.denyInsecure && _lodash.default.includes(this.denyInsecure, name)) {
      return false;
    }

    if (this.allowInsecure && _lodash.default.includes(this.allowInsecure, name)) {
      return true;
    }

    if (this.relaxedSecurityEnabled) {
      return true;
    }

    return false;
  }

  ensureFeatureEnabled(name) {
    this.assertFeatureEnabled(name);
  }

  assertFeatureEnabled(name) {
    if (!this.isFeatureEnabled(name)) {
      throw new Error(`Potentially insecure feature '${name}' has not been ` + `enabled. If you want to enable this feature and accept ` + `the security ramifications, please do so by following ` + `the documented instructions at https://github.com/appium` + `/appium/blob/master/docs/en/writing-running-appium/security.md`);
    }
  }

  validateLocatorStrategy(strategy, webContext = false) {
    let validStrategies = this.locatorStrategies;
    this.log.debug(`Valid locator strategies for this request: ${validStrategies.join(', ')}`);

    if (webContext) {
      validStrategies = validStrategies.concat(this.webLocatorStrategies);
    }

    if (!_lodash.default.includes(validStrategies, strategy)) {
      throw new _protocol.errors.InvalidSelectorError(`Locator Strategy '${strategy}' is not supported for this session`);
    }
  }

  proxyActive(sessionId) {
    return false;
  }

  getProxyAvoidList(sessionId) {
    return [];
  }

  canProxy(sessionId) {
    return false;
  }

  proxyRouteIsAvoided(sessionId, method, url, body) {
    for (let avoidSchema of this.getProxyAvoidList(sessionId)) {
      if (!_lodash.default.isArray(avoidSchema) || avoidSchema.length !== 2) {
        throw new Error('Proxy avoidance must be a list of pairs');
      }

      let [avoidMethod, avoidPathRegex] = avoidSchema;

      if (!_lodash.default.includes(['GET', 'POST', 'DELETE'], avoidMethod)) {
        throw new Error(`Unrecognized proxy avoidance method '${avoidMethod}'`);
      }

      if (!_lodash.default.isRegExp(avoidPathRegex)) {
        throw new Error('Proxy avoidance path must be a regular expression');
      }

      let normalizedUrl = url.replace(new RegExp(`^${_lodash.default.escapeRegExp(this.basePath)}`), '');

      if (avoidMethod === method && avoidPathRegex.test(normalizedUrl)) {
        return true;
      }
    }

    return false;
  }

  addManagedDriver(driver) {
    this.managedDrivers.push(driver);
  }

  getManagedDrivers() {
    return this.managedDrivers;
  }

  async clearNewCommandTimeout() {
    if (this.noCommandTimer) {
      clearTimeout(this.noCommandTimer);
      this.noCommandTimer = null;
    }
  }

}

exports.DriverCore = DriverCore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,