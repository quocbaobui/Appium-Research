"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fs = exports.default = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _crypto = _interopRequireDefault(require("crypto"));

var _fs = require("fs");

var _glob = _interopRequireDefault(require("glob"));

var _klaw = _interopRequireDefault(require("klaw"));

var _lodash = _interopRequireDefault(require("lodash"));

var _mv = _interopRequireDefault(require("mv"));

var _ncp = _interopRequireDefault(require("ncp"));

var _path = _interopRequireDefault(require("path"));

var _pkgDir = _interopRequireDefault(require("pkg-dir"));

var _readPkg = _interopRequireDefault(require("read-pkg"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));

var _which = _interopRequireDefault(require("which"));

var _logger = _interopRequireDefault(require("./logger"));

var _timing = _interopRequireDefault(require("./timing"));

var _util = require("./util");

const ncpAsync = _bluebird.default.promisify(_ncp.default);

const findRootCached = _lodash.default.memoize(_pkgDir.default.sync);

const fs = {
  async hasAccess(path) {
    try {
      await _fs.promises.access(path, _fs.constants.R_OK);
    } catch (err) {
      return false;
    }

    return true;
  },

  async exists(path) {
    return await fs.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),
  rimrafSync: _rimraf.default.sync,

  async mkdir(filepath, opts = {}) {
    try {
      return await _fs.promises.mkdir(filepath, opts);
    } catch (err) {
      if ((err === null || err === void 0 ? void 0 : err.code) !== 'EEXIST') {
        throw err;
      }
    }
  },

  async copyFile(source, destination, opts = {}) {
    if (!(await fs.hasAccess(source))) {
      throw new Error(`The file at '${source}' does not exist or is not accessible`);
    }

    return await ncpAsync(source, destination, opts);
  },

  async md5(filePath) {
    return await fs.hash(filePath, 'md5');
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _which.default,
  glob: _bluebird.default.promisify(_glob.default),
  sanitizeName: _sanitizeFilename.default,

  async hash(filePath, algorithm = 'sha1') {
    return await new _bluebird.default((resolve, reject) => {
      const fileHash = _crypto.default.createHash(algorithm);

      const readStream = (0, _fs.createReadStream)(filePath);
      readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
      readStream.on('data', chunk => fileHash.update(chunk));
      readStream.on('end', () => resolve(fileHash.digest('hex')));
    });
  },

  walk(dir, opts) {
    return (0, _klaw.default)(dir, opts);
  },

  async mkdirp(dir) {
    return await fs.mkdir(dir, {
      recursive: true
    });
  },

  async walkDir(dir, recursive, callback) {
    let isValidRoot = false;
    let errMsg = null;

    try {
      isValidRoot = (await fs.stat(dir)).isDirectory();
    } catch (e) {
      errMsg = e.message;
    }

    if (!isValidRoot) {
      throw Error(`'${dir}' is not a valid root directory` + (errMsg ? `. Original error: ${errMsg}` : ''));
    }

    let walker;
    let fileCount = 0;
    let directoryCount = 0;
    const timer = new _timing.default().start();
    return await new _bluebird.default(function (resolve, reject) {
      let lastFileProcessed = _bluebird.default.resolve();

      walker = (0, _klaw.default)(dir, {
        depthLimit: recursive ? -1 : 0
      });
      walker.on('data', function (item) {
        walker.pause();

        if (!item.stats.isDirectory()) {
          fileCount++;
        } else {
          directoryCount++;
        }

        lastFileProcessed = _bluebird.default.try(async () => await callback(item.path, item.stats.isDirectory())).then(function (done = false) {
          if (done) {
            resolve(item.path);
          } else {
            walker.resume();
          }
        }).catch(reject);
      }).on('error', function (err, item) {
        _logger.default.warn(`Got an error while walking '${item.path}': ${err.message}`);

        if (err.code === 'ENOENT') {
          _logger.default.warn('All files may not have been accessed');

          reject(err);
        }
      }).on('end', function () {
        lastFileProcessed.then(file => {
          resolve(file ?? null);
        }).catch(function (err) {
          _logger.default.warn(`Unexpected error: ${err.message}`);

          reject(err);
        });
      });
    }).finally(function () {
      _logger.default.debug(`Traversed ${(0, _util.pluralize)('directory', directoryCount, true)} ` + `and ${(0, _util.pluralize)('file', fileCount, true)} ` + `in ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);

      if (walker) {
        walker.destroy();
      }
    });
  },

  readPackageJsonFrom(dir, opts = {}) {
    const cwd = fs.findRoot(dir);

    try {
      return _readPkg.default.sync({ ...opts,
        cwd
      });
    } catch (err) {
      err.message = `Failed to read a \`package.json\` from dir \`${dir}\`:\n\n${err.message}`;
      throw err;
    }
  },

  findRoot(dir) {
    if (!dir || !_path.default.isAbsolute(dir)) {
      throw new TypeError('`findRoot()` must be provided a non-empty, absolute path');
    }

    const result = findRootCached(dir);

    if (!result) {
      throw new Error(`\`findRoot()\` could not find \`package.json\` from ${dir}`);
    }

    return result;
  },

  access: _fs.promises.access,
  appendFile: _fs.promises.appendFile,
  chmod: _fs.promises.chmod,
  close: _bluebird.default.promisify(_fs.close),
  constants: _fs.constants,
  createWriteStream: _fs.createWriteStream,
  createReadStream: _fs.createReadStream,
  lstat: _fs.promises.lstat,
  open: _bluebird.default.promisify(_fs.open),
  openFile: _fs.promises.open,
  readdir: _fs.promises.readdir,
  read: _bluebird.default.promisify(_fs.read),
  readFile: _fs.promises.readFile,
  readlink: _fs.promises.readlink,
  realpath: _fs.promises.realpath,
  rename: _fs.promises.rename,
  stat: _fs.promises.stat,
  symlink: _fs.promises.symlink,
  unlink: _fs.promises.unlink,
  write: _bluebird.default.promisify(_fs.write),
  writeFile: _fs.promises.writeFile,
  F_OK: _fs.constants.F_OK,
  R_OK: _fs.constants.R_OK,
  W_OK: _fs.constants.W_OK,
  X_OK: _fs.constants.X_OK
};
exports.fs = fs;
var _default = fs;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,